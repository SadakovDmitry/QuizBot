import time
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from io import BytesIO
from openpyxl import Workbook
from aiogram.types import BufferedInputFile

from utils import make_options_keyboard, start_timer
from config import BOT_TOKEN, ADMIN_IDS
from db import db

# –í–æ–ø—Ä–æ—Å—ã –∫–≤–∏–∑–æ–≤ (—Ç—Ä–∏ –Ω–∞–±–æ—Ä–∞ –ø–æ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–π)
quiz_sets = [
    # –ö–≤–∏–∑ ‚Ññ1 ‚Äî –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è
    [
        {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º", "–õ–æ–Ω–¥–æ–Ω"], "answer": 1},
        {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?", "options": ["1939", "1914", "1941", "1917"], "answer": 0},
        {"question": "–ö–∞–∫–æ–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–¥—ã?", "options": ["H2O", "CO2", "O2", "NaCl"], "answer": 0},
        {"question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?", "options": ["–ó–µ–º–ª—è", "–í–µ–Ω–µ—Ä–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å"], "answer": 2},
        {"question": "–ê–≤—Ç–æ—Ä —Ä–æ–º–∞–Ω–∞ ¬´–í–æ–π–Ω–∞ –∏ –º–∏—Ä¬ª?", "options": ["–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω"], "answer": 0},
        {"question": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É?", "options": ["366", "365", "364", "367"], "answer": 0},
        {"question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –≤ –º–∏—Ä–µ?", "options": ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"], "answer": 1},
        {"question": "–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –ø–ª–æ—â–∞–¥–∏?", "options": ["–¢–∏—Ö–∏–π", "–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π"], "answer": 0},
        {"question": "–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª –∑–æ–ª–æ—Ç–∞?", "options": ["Au", "Ag", "Fe", "Hg"], "answer": 0},
        {"question": "–°–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", "options": ["7", "6", "5", "8"], "answer": 0},
    ],

    # –ö–≤–∏–∑ ‚Ññ2 ‚Äî –ö—É–ª—å—Ç—É—Ä–∞ –∏ –Ω–∞—É–∫–∞
    [
        {"question": "–ö—Ç–æ –∞–≤—Ç–æ—Ä –∫–∞—Ä—Ç–∏–Ω—ã ¬´–ú–æ–Ω–∞ –õ–∏–∑–∞¬ª?", "options": ["–õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏", "–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ", "–†–∞—Ñ–∞—ç–ª—å", "–ê–ª—å–±—Ä–µ—Ö—Ç –î—é—Ä–µ—Ä"], "answer": 0},
        {"question": "–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç –Ω–∞—É–∫–∞ –±–æ—Ç–∞–Ω–∏–∫–∞?", "options": ["–†–∞—Å—Ç–µ–Ω–∏—è", "–ñ–∏–≤–æ—Ç–Ω—ã—Ö", "–ö–æ—Å–º–æ—Å", "–ú–∏–Ω–µ—Ä–∞–ª—ã"], "answer": 0},
        {"question": "–ö–∞–∫–∞—è –≥–æ—Ä–∞ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –Ω–∞ –ó–µ–º–ª–µ?", "options": ["–≠–≤–µ—Ä–µ—Å—Ç", "–ö2", "–ö–∞–Ω—á–µ–Ω–¥–∂–∞–Ω–≥–∞", "–õ—Ö–æ—Ü–∑–µ"], "answer": 0},
        {"question": "–ö—Ç–æ –∞–≤—Ç–æ—Ä —Å–µ—Ä–∏–∏ –∫–Ω–∏–≥ ¬´–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä¬ª?", "options": ["–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥", "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", "–î–∂–æ—Ä–¥–∂ –ú–∞—Ä—Ç–∏–Ω", "–ö–ª–∞–π–≤ –°—Ç–µ–π–ø–ª–∑ –õ—å—é–∏—Å"], "answer": 0},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã 2016 –≥–æ–¥–∞?", "options": ["–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ö–∏—Ç–∞–π", "–ë—Ä–∞–∑–∏–ª–∏—è", "–Ø–ø–æ–Ω–∏—è"], "answer": 2},
        {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ CPU –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ?", "options": ["Central Processing Unit", "Computer Personal Unit", "Control Processing Unit", "Central Peripheral Unit"], "answer": 0},
        {"question": "–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ø–ø–æ–Ω–∏–∏?", "options": ["–ô–µ–Ω–∞", "–Æ–∞–Ω—å", "–í–æ–Ω", "–†—É–ø–∏—è"], "answer": 0},
        {"question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –≤ —Å–ø–µ–∫—Ç—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É –∫—Ä–∞—Å–Ω—ã–º –∏ –∂—ë–ª—Ç—ã–º?", "options": ["–û—Ä–∞–Ω–∂–µ–≤—ã–π", "–°–∏–Ω–∏–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–ó–µ–ª—ë–Ω—ã–π"], "answer": 0},
        {"question": "–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –ø–æ –º–∞—Å—Å–µ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º —Ç–µ–ª–µ?", "options": ["–ö–æ–∂–∞", "–ü–µ—á–µ–Ω—å", "–°–µ—Ä–¥—Ü–µ", "–õ—ë–≥–∫–∏–µ"], "answer": 0},
        {"question": "–°—Ç–æ–ª–∏—Ü–∞ –ò—Ç–∞–ª–∏–∏?", "options": ["–†–∏–º", "–ú–∏–ª–∞–Ω", "–í–µ–Ω–µ—Ü–∏—è", "–§–ª–æ—Ä–µ–Ω—Ü–∏—è"], "answer": 0},
    ],

    # –ö–≤–∏–∑ ‚Ññ3 ‚Äî –†–æ—Å—Å–∏—è
    [
        {"question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?", "options": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"], "answer": 0},
        {"question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –≤ –†–æ—Å—Å–∏–∏?", "options": ["–í–æ–ª–≥–∞", "–õ–µ–Ω–∞", "–ï–Ω–∏—Å–µ–π", "–û–±—å"], "answer": 0},
        {"question": "–ö–∞–∫–æ–π –ø–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Å–æ—á–∞–π—à–∏–º –≤ –†–æ—Å—Å–∏–∏?", "options": ["–≠–ª—å–±—Ä—É—Å", "–ü–∏–∫ –ü–æ–±–µ–¥—ã", "–ö2", "–ú–æ–Ω–±–ª–∞–Ω"], "answer": 0},
        {"question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ä–æ–º–∞–Ω ¬´–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ¬ª?", "options": ["–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "–ê–Ω—Ç–æ–Ω –ß–µ—Ö–æ–≤", "–ù–∏–∫–æ–ª–∞–π –ì–æ–≥–æ–ª—å"], "answer": 0},
        {"question": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –≥–µ—Ä–±–µ –†–æ—Å—Å–∏–∏?", "options": ["–ú–µ–¥–≤–µ–¥—å", "–î–≤—É–≥–ª–∞–≤—ã–π –æ—Ä—ë–ª", "–õ–µ–≤", "–¢–∏–≥—Ä"], "answer": 1},
        {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è?", "options": ["1917", "1905", "1914", "1920"], "answer": 0},
        {"question": "–°–∫–æ–ª—å–∫–æ —Ä–µ—Å–ø—É–±–ª–∏–∫ –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏?", "options": ["22", "21", "23", "24"], "answer": 0},
        {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§?", "options": ["1993", "1991", "2000", "1989"], "answer": 0},
        {"question": "–ù–∞ –∫–∞–∫–æ–π —Ä–µ–∫–µ —Å—Ç–æ–∏—Ç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?", "options": ["–ù–µ–≤–∞", "–í–æ–ª—Ö–æ–≤", "–î–æ–Ω", "–û–∫–∞"], "answer": 0},
        {"question": "–ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å –†–æ—Å—Å–∏–µ–π?", "options": ["–ú–∞—Ç—Ä—ë—à–∫–∞", "–°–∞–º–æ–≤–∞—Ä", "–ë–∞–ª–∞–ª–∞–π–∫–∞", "–ö—Ä–µ–º–ª—å"], "answer": 1},
    ],
]


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∫–≤–∏–∑–∞
class Registration(StatesGroup):
    first_name = State()
    last_name = State()

class QuizState(StatesGroup):
    answering = State()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(Registration.first_name)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–≤–∏–∑–æ–≤! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message(Registration.first_name)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(Registration.last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")

@dp.message(Registration.last_name)
async def process_last_name(message: Message, state: FSMContext):
    data = await state.get_data()
    db.register_user(message.from_user.id, data['first_name'], message.text)
    await state.clear()
    await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {data['first_name']} {message.text}!")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑
@dp.message(Command("quiz"))
async def start_quiz_user(message: Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–≤–∏–∑ –∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —é–∑–µ—Ä –µ–≥–æ
    quiz_id = db.get_active_quiz()
    if quiz_id is None:
        return await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    if db.has_played(message.from_user.id, quiz_id):
        return await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç –∫–≤–∏–∑.")
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –Ω–∞—á–∞–ª–∞ (–¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ '–Ω–∞—á–∞–≤—à–∏—Ö')
    db.record_start(message.from_user.id, quiz_id, time.time())
    await state.update_data(
        quiz_id=quiz_id,
        current_idx=0,
        answers=[],
        start_time=time.time(),    # —Å—Ç–∞–≤–∏–º –º–µ—Ç–∫—É —Å—Ç–∞—Ä—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
    )
    # –∑–∞–¥–∞—ë–º —Ñ–ª–∞–≥ answered, —á—Ç–æ–±—ã —Ç–∞–π–º–µ—Ä —Å—Ä–∞–∑—É –∑–∞—Ä–∞–±–æ—Ç–∞–ª
    await state.update_data(answered=False)
    await ask_question(message.chat.id, state)

async def ask_question(chat_id: int, state: FSMContext):
    data = await state.get_data()
    idx = data["current_idx"]
    quiz_id = data["quiz_id"]
    q = quiz_sets[quiz_id-1][idx]

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –≤ state
    kb = make_options_keyboard(q["options"], idx)
    await state.update_data(
        current_question=q,
        current_keyboard=kb,
        answered=False,
    )

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç —Å 60 —Å–µ–∫—É–Ω–¥–∞–º–∏
    msg = await bot.send_message(
        chat_id,
        f"‚ùì –í–æ–ø—Ä–æ—Å {idx+1}: {q['question']}\nüïí –û—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫",
        reply_markup=kb,
    )

    # —Å—Ç–∞—Ä—Ç—É–µ–º –∑–∞–¥–∞—á—É-—Ç–∞–π–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–º–µ–Ω–∏—Ç—å
    timer_task = asyncio.create_task(
        start_timer(bot, chat_id, msg.message_id, idx, state)
    )
    await state.update_data(timer_task=timer_task)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@dp.callback_query(lambda c: c.data and c.data.startswith("answer_"))
async def answer_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
    task = data.get("timer_task")
    if task:
        task.cancel()

    # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    _, q_idx, ans_idx = callback.data.split("_")
    q_idx, ans_idx = int(q_idx), int(ans_idx)

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    answers = data.get("answers", [])
    answers.append(ans_idx)
    await state.update_data(answers=answers, answered=True)

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º current_idx –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–Ω–µ—Ü –ª–∏ –∫–≤–∏–∑–∞
    next_idx = data["current_idx"] + 1
    await state.update_data(current_idx=next_idx)

    total_questions = len(quiz_sets[data["quiz_id"]-1])
    if next_idx < total_questions:
        # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await ask_question(callback.from_user.id, state)
    else:
        # —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        start = data["start_time"]
        total_time = time.time() - start
        correct = sum(
            1
            for i, user_ans in enumerate(answers)
            if user_ans == quiz_sets[data["quiz_id"]-1][i]["answer"]
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        db.save_result(callback.from_user.id, data["quiz_id"], correct, total_time)

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç—Å—ã–ª–∞–µ–º –æ—Ç—á—ë—Ç
        report = (
            f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct}/{total_questions}\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è: {int(total_time)} —Å–µ–∫\n\n"
        )
        for i, user_ans in enumerate(answers):
            q = quiz_sets[data["quiz_id"]-1][i]
            ua = "‚Äì" if user_ans is None else q["options"][user_ans]
            ca = q["options"][q["answer"]]
            report += (
                f"{i+1}. {q['question']}\n"
                f"   –í–∞—à –æ—Ç–≤–µ—Ç: {ua}\n"
                f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {ca}\n\n"
            )
        await bot.send_message(callback.from_user.id, report)

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command('start_quiz'))
async def cmd_start_quiz(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /start_quiz <–Ω–æ–º–µ—Ä 1-3>")
    num = int(parts[1])
    if not 1 <= num <= len(quiz_sets):
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞.")
    db.set_active_quiz(num)
    await message.answer(f"–ê–∫—Ç–∏–≤–µ–Ω –∫–≤–∏–∑ ‚Ññ{num}")

@dp.message(Command('stop_quiz'))
async def cmd_stop_quiz(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    db.set_active_quiz(None)
    await message.answer("–ö–≤–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stats <–Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞>")
    num = int(parts[1])

    # —Å–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –Ω–∞—á–∞–ª–∏ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏
    started = db.get_started_count(num)
    results = db.get_results(num)  # —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ correct desc, time asc
    finished = len(results)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = [
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–≤–∏–∑–∞ ‚Ññ{num}:",
        f"üë• –ù–∞—á–∞–ª–æ: {started}",
        f"‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {finished}",
        "",
        "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ‚Üì, –∑–∞—Ç–µ–º –≤—Ä–µ–º–µ–Ω–∏ ‚Üë):"
    ]
    for i, r in enumerate(results, start=1):
        text.append(f"{i}. {r['first_name']} {r['last_name']} ‚Äî {r['correct_count']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {int(r['total_time'])} —Å–µ–∫")

    await message.answer("\n".join(text))

@dp.message(Command('results'))
async def cmd_results(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /results <–Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞>")
    num = int(parts[1])
    rows = db.get_results(num)
    if not rows:
        return await message.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–≤–∏–∑–∞.")
    text = [f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞ ‚Ññ{num}:\n"]
    for i, r in enumerate(rows, 1):
        text.append(f"{i}. {r['first_name']} {r['last_name']} ‚Äî {r['correct_count']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö, {r['total_time']} —Å–µ–∫")
    await message.answer('\n'.join(text))

@dp.message(Command('export'))
async def cmd_export(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    parts = message.text.split()
    if len(parts) < 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export <–Ω–æ–º–µ—Ä –∫–≤–∏–∑–∞>")

    num = int(parts[1])
    rows = db.get_results(num)

    # –°–æ–±–∏—Ä–∞–µ–º Excel –≤ –ø–∞–º—è—Ç–∏
    wb = Workbook()
    ws = wb.active
    ws.append(["–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö", "–í—Ä–µ–º—è (—Å–µ–∫)"])
    for r in rows:
        ws.append([r['first_name'], r['last_name'], r['correct_count'], r['total_time']])

    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)

    # –ì–æ—Ç–æ–≤–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ –±—É—Ñ–µ—Ä–∞
    data = buffer.getvalue()
    filename = f"results_quiz{num}.xlsx"
    doc = BufferedInputFile(data, filename=filename)
    await message.answer_document(document=doc, caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞ ‚Ññ{num}")

if __name__ == '__main__':
    import logging
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
