from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup


def make_options_keyboard(options: list[str], question_idx: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for i, opt in enumerate(options):
        builder.button(text=opt, callback_data=f"answer_{question_idx}_{i}")
    builder.adjust(1)
    return builder.as_markup()

async def start_timer(
    bot: Bot,
    chat_id: int,
    message_id: int,
    question_idx: int,
    state,
):
    """
    –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º.
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ —Ñ–ª–∞–≥ 'answered' –Ω–µ –ø–æ–¥–Ω—è—Ç ‚Äî –∞–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
    """
    for remaining in range(60, 0, -5):
        await asyncio.sleep(5)
        data = await state.get_data()
        if data.get("answered", False):
            return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª, –≤—ã—Ö–æ–¥–∏–º

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        q = data["current_question"]
        kb = data["current_keyboard"]
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚ùì –í–æ–ø—Ä–æ—Å {question_idx+1}: {q['question']}\nüïí –û—Å—Ç–∞–ª–æ—Å—å {remaining-5} —Å–µ–∫",
                reply_markup=kb,
            )
        except:
            return  # –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏–ª–∏

#     # –¢–∞–π–º–∞—É—Ç: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º None –≤ –æ—Ç–≤–µ—Ç—ã
#     await state.update_data(answered=True)
#     answers = data.get("answers", [])
#     answers.append(None)  # None –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º
#     await state.update_data(answers=answers)
#
#     # –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
#     await ask_question(chat_id, state)
    # –í—Ä–µ–º—è –≤—ã—à–ª–æ ‚Äî –∑–∞–Ω–æ–≤–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º state
    from main import ask_question, finish_quiz, quiz_sets
    data = await state.get_data()
    if data.get("answered", False):
        return  # –Ω–∞ –≥—Ä–∞–Ω–∏ —É—Å–ø–µ–ª –Ω–∞–∂–∞—Ç—å

    # 1) –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º None –∫–∞–∫ –æ—Ç–≤–µ—Ç
    answers = data.get("answers", [])
    answers.append(None)
    # 2) –ø–æ–º–µ—á–∞–µ–º answered, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–π–º–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    curr_idx = data.get("current_idx", 0)
    next_idx = curr_idx + 1
    await state.update_data(
        answers=answers,
        answered=True,
        current_idx=next_idx
    )

    # 3) –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –∑–∞–¥–∞–µ–º –µ–≥–æ
    quiz_id = data["quiz_id"]
    total_q = len(quiz_sets[quiz_id - 1])
    if next_idx < total_q:
        await ask_question(chat_id, state)
    else:
        # 4) –∏–Ω–∞—á–µ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑ —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π, —á—Ç–æ –∏ –≤ callback
        await finish_quiz(chat_id, state)
